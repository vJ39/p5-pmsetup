#!/usr/bin/env perl
use strict;
use warnings;
use ExtUtils::MakeMaker qw(prompt);
use File::Basename;
use File::Path;
use File::Spec;
use Template;
use YAML;

sub ask {
    my($prompt, $field, $config, $save_ref) = @_;
    while (! $config->{$field}) {
        $config->{$field} = prompt("$prompt: ", '');
        $$save_ref++;
    }
}

my $path   = File::Spec->catfile($ENV{HOME}, "/.pmsetuprc");
my $config = eval { YAML::LoadFile($path) } || {};

my $save;
ask 'Your name', 'author', $config, \$save;
ask 'Your email', 'email', $config, \$save;
ask 'Github account', 'github_user', $config, \$save;

my $modname = shift @ARGV or die "Usage: $0 module\n";
   $modname =~ s/-/::/g;

write_plugin_files($modname, $config);

END {
    YAML::DumpFile($path, $config) if $save;
}

sub write_plugin_files {
    my($module, $config) = @_;

    # $module = "Foo::Bar"
    # $dist   = "Foo-Bar"
    # $path   = "Foo/Bar.pm"
    my @pkg  = split /::/, $module;
    my $dist = join "-", @pkg;
    my $path = join("/", @pkg) . ".pm";

    mkdir $dist, 0777;
    chdir $dist;

    my @template = YAML::Load(join '', <DATA>);
    my $vars = { module => $module, dist => $dist, path => $path,
                 config => $config, localtime => scalar localtime, year => (localtime)[5] + 1900 };

    for my $tmpl (@template) {
        my $file = $tmpl->{file};
           $file =~ s/(\$\w+)/$1/eeg;
        write_file($file, $tmpl->{template}, $vars);
    }

    # init first to make Milla Git integration happy
    system "git", "init";
    system "git", "add", ".";

    !system "dzil", "build" or die $?;
    !system "dzil", "clean" or die $?;

    system "git", "add", ".";
}

sub write_file {
    my($path, $template, $vars) = @_;

    if (-e $path) {
        my $ans = prompt("$path exists. Override? [yN] ", 'n');
        return if $ans !~ /[Yy]/;
    }

    my $dir = File::Basename::dirname($path);
    unless (-e $dir) {
        warn "Creating directory $dir\n";
        File::Path::mkpath($dir, 1, 0777);
    }

    my $tt = Template->new;
    $tt->process(\$template, $vars, \my $content);

    warn "Creating $path\n";
    open my $out, ">", $path or die "$path: $!";
    print $out $content;
    close $out;
}

__DATA__
---
file: dist.ini
template: |
  [@Milla]

---
file: cpanfile
template: |
  requires 'perl', '5.008001';
  
  on test => sub {
      requires 'Test::More', '0.88';
  };
---
file: Changes
template: |
  Revision history for [% module %]

  {{$NEXT}}
          - Initial release
---
file: lib/$path
template: |
  package [% module %];

  use strict;
  use 5.008_001;
  our $VERSION = '0.01';

  1;
  __END__

  =encoding utf-8

  =for stopwords

  =head1 NAME

  [% module %] - Blah blah blah

  =head1 SYNOPSIS

    use [% module %];

  =head1 DESCRIPTION

  [% module %] is

  =head1 AUTHOR

  [% config.author %] E<lt>[% config.email %]E<gt>

  =head1 COPYRIGHT

  Copyright [% year %]- [% config.author %]

  =head1 LICENSE

  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.

  =head1 SEE ALSO

  =cut
---
file: .gitignore
template: |
  MYMETA.*
  META.yml
  /[% dist %]-*
  /.build
  !META.json
